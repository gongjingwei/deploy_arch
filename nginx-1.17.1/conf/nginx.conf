
#user  nobody;
worker_processes  1; #工作进程的个数，一般与计算机的cpu核数一致 

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;#单个进程最大连接数（最大连接数=连接数*进程数） 
}


http {
    include       mime.types;#文件扩展名与文件类型映射表
    default_type  application/octet-stream; #默认文件类型  

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

	#开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，
	#如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。 
    sendfile        on;
	 #tcp_nopush     on;

    #keepalive_timeout  0;
	#长连接超时时间，单位是秒  
    keepalive_timeout  65;
	
	#启用Gizp压缩  
    #gzip  on;
	
	#服务器的集群  
    upstream  jinwei.com {  #服务器集群名字   
        
		#第1种 按权重分配
		server    127.0.0.1:8888  weight=1; #服务器配置   weight是权重的意思，权重越大，分配的概率越大。  
        server    127.0.0.1:9999  weight=2;  
		
		#第2种 按后端服务器的响应时间来分配请求，响应时间短的优先分配。与weight分配策略类似。fair(公平的)
		 
 
    }   

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            #root   html; 我注释了
            #index  index.html index.htm; 我注释了
			proxy_pass http://jinwei.com; #随便写的,但得对应上upstream的名称!
            proxy_redirect default; 
		    proxy_connect_timeout       1;  #当访问的Tomcat无法在1秒内立刻响应,立刻切换到其他Tomcat
            proxy_read_timeout          1;
            proxy_send_timeout          1;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
